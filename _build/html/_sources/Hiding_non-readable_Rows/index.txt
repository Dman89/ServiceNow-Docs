Hiding non-readable Rows in List View
######################################

.. admonition:: Row Level Security and On Query Business Rules
  :class: myOwnStyle

      |

Separating Readable Projects By Department
**************************************************

If you ever try placing security by record (or by row), your users may start seeing lists views with a count of Rows removed by Securiy contraints.
Even worse they may think there are no more records, when records can easily be on the first and last page with any number of removed rows in between.

.. image:: img/Constraints.JPG
      :width: 100%

Creating an Before Query Business Rule
=================================================

The query created in the Business Rule can be thought of as a filter.  So let's say one requirement is to allow anyone from the InfoSec Department to see any
Contract record.  We would start the Business Rule, by wrapping the filter with an if statement.

  .. code-block:: javascript

    if (userIsInInfoSec()) {
      // Add filter query here
    }

    function userIsInInfoSec() {
      //Normal Glide Record query to see if user's Dept is InfoSec
    }

Here, the if statement skips the filter as long as they are in the InfoSec Department. Pretty simple right?  Let's just add one more type that can skip the filter.

  .. code-block:: javascript

    if (gs.hasRole('admin') || userIsInInfoSec()) {
      // Add filter query here
    }

Next, we need to apply the query.  Let's say there's a department field on each contract and if a user is in the same department as the one listed in contracts then they
should be able to view it.

  .. code-block:: javascript

    if (gs.hasRole('admin') || userIsInInfoSec()) {
      var uID = gs.getUserID();
      var uGR = new GlideRecord("sys_user");
      uGR.get(uID);

      current.addQuery('department', uGR.department);
    }




Staging Table
*******************************

A table should be created that extends the Import Set Row
table with the following added fields

    +-------------------+----------+----------------------------------------------------------------------+
    | Column label      | Type     |  Max length                                                          |
    +===================+==========+======================================================================+
    | attachment        | String   |   1,000,000                                                          |
    +-------------------+----------+----------------------------------------------------------------------+
    | name              | String   |                                                                      |
    +-------------------+----------+----------------------------------------------------------------------+
    | ticket number     | String   |     1,000                                                            |
    +-------------------+----------+----------------------------------------------------------------------+



Create a Transform Map
************************************

    +-----------------------------+--------------------------------------+-------------------------------+
    | Name                        | Source table                         |  Target table                 |           
    +=============================+======================================+===============================+
    | Attachment Stage to Queue   | Attachment Staging Table             |   ecc_queue                   |
    +-----------------------------+--------------------------------------+-------------------------------+


Field Maps
=========================================

    +-------------------+------------------+
    | Source field      | Target field     |                                    
    +===================+==================+
    | u_attachment      | payload          |
    +-------------------+------------------+
    | u_name            | name             |
    +-------------------+------------------+
    | u_ticket_number   | source           |
    +-------------------+------------------+
    | [Script]          | agent            |
    +-------------------+------------------+
    | [Script]          | topic            |
    +-------------------+------------------+

Agent Scripts
-------------------------

  .. code-block:: javascript

    answer = (function transformEntry(source) {

      // Add your code here
      return "AttachmentCreator"; // return the value to be put into the target field

    })(source);

Topic Scripts
-------------------------

  .. code-block:: javascript

    answer = (function transformEntry(source) {

      // Add your code here
      return "AttachmentCreator"; // return the value to be put into the target field

    })(source);



Sending the REST Message
*************************************

  The rest message should be sent with the fields below

  .. code-block:: javascript

    {
    "u_name":"Something.jpg:image/jpeg",
    "u_ticket_number":"incident:83bff1fddb2d220003ee793ebf961957",
    "u_attachment":"e490qugijelkabvrohatge4",
    }


Example Business Rule Script for Attachment
************************************************

  .. code-block:: javascript

    var target = new GlideRecord('sys_attachment'); 
    target.addQuery('table_name', 'incident');
    target.addQuery('table_sys_id', current.sys_id);
    target.query(); 

    while(target.next()) {
      var sa = new GlideSysAttachment();
      var binData = sa.getBytes(target);
      var base64Data = GlideStringUtil.base64Encode(binData);

      //Send Attachments
      var requestAttachment = new sn_ws.RESTMessageV2();
      requestAttachment.setEndpoint('https://XXXXX.service-now.com/api/now/import/u_attachment_staging_table');
      requestAttachment.setHttpMethod('POST');

      requestAttachment.setBasicAuth(user,password);
      requestAttachment.setRequestHeader("Accept","application/json");
      requestAttachment.setRequestHeader('Content-Type','application/json');

      var requestAttachmentJSONBody = createRequestBody("u_name", target.file_name + ":" + target.content_type);
      requestAttachmentJSONBody += addToRequestBody("u_ticket_number", 'incident:' + sysid);
      requestAttachmentJSONBody += addToRequestBody("u_attachment", base64Data);
      requestAttachmentJSONBody += closeRequestBody();

      requestAttachment.setRequestBody(requestAttachmentJSONBody);

      var responseAttachment = requestAttachment.execute();
    }

  The createRequestBody() functions are just used to create a JSON Object with for example {u_name: "targetinfo", u_ticket_number: "incident:39024903284"}